name: Deploy Backend to VPC2 (Simple Strategy)

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "build.gradle"
      - ".github/workflows/**"
  workflow_dispatch: # 수동 실행 가능

env:
  AWS_REGION: ap-northeast-2
  JAVA_VERSION: 17
  S3_BUCKET: empick-bucket
  S3_KEY: releases/empick-backend-latest.jar

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: 🔧 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 📦 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🏗️ Build with Gradle
        run: ./gradlew clean build -x test

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📤 Upload JAR to S3
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*plain*" | head -n 1)
          echo "Uploading $JAR_FILE to S3..."
          aws s3 cp "$JAR_FILE" s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}
          echo "✅ JAR uploaded successfully"

      - name: 🚀 Deploy to Both Instances (Simple Strategy)
        run: |
          echo "🔄 Starting deployment to both Blue and Green instances..."

          # Deploy to Blue Instance (AZ-A)
          echo "📦 Deploying to Blue Instance..."
          aws ssm send-command \
            --instance-ids ${{ secrets.BLUE_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"🔄 Starting deployment on Blue instance...\"",
              "sudo systemctl stop empick-backend || true",
              "cd /opt/empick",
              "sudo -u springboot wget -O empick-backend.jar https://empick-bucket.s3.ap-northeast-2.amazonaws.com/releases/empick-backend-latest.jar",
              "sudo chown springboot:springboot empick-backend.jar",
              "sudo chmod +x empick-backend.jar",
              "sudo systemctl start empick-backend",
              "echo \"✅ Deployment completed on Blue instance\""
            ]' \
            --region ${{ env.AWS_REGION }}

          # Deploy to Green Instance (AZ-C)  
          echo "📦 Deploying to Green Instance..."
          aws ssm send-command \
            --instance-ids ${{ secrets.GREEN_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"🔄 Starting deployment on Green instance...\"",
              "sudo systemctl stop empick-backend || true", 
              "cd /opt/empick",
              "sudo -u springboot wget -O empick-backend.jar https://empick-bucket.s3.ap-northeast-2.amazonaws.com/releases/empick-backend-latest.jar",
              "sudo chown springboot:springboot empick-backend.jar",
              "sudo chmod +x empick-backend.jar", 
              "sudo systemctl start empick-backend",
              "echo \"✅ Deployment completed on Green instance\""
            ]' \
            --region ${{ env.AWS_REGION }}

      - name: ⏰ Wait for services to start
        run: |
          echo "⏰ Waiting 60 seconds for services to start..."
          sleep 60

      - name: 🏥 Health Check
        run: |
          echo "🏥 Performing health checks..."

          # ALB Health Check (최종 확인)
          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12..."
            if curl -f -s ${{ secrets.ALB_HEALTH_CHECK_URL }}; then
              echo "✅ ALB Health check passed!"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ Health check failed after 12 attempts"
              exit 1
            fi
            sleep 15
          done

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 Deployment Summary:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ JAR Build: SUCCESS"
          echo "✅ S3 Upload: SUCCESS" 
          echo "✅ Blue Instance Deploy: SUCCESS"
          echo "✅ Green Instance Deploy: SUCCESS"
          echo "✅ Health Check: SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 Application URL: ${{ secrets.ALB_URL }}"
          echo "🏥 Health Check: ${{ secrets.ALB_HEALTH_CHECK_URL }}"
          echo "📊 API Endpoint: ${{ secrets.ALB_URL }}/api"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔧 Troubleshooting steps:"
          echo "1. Check AWS SSM Run Command status"
          echo "2. SSH to instances and check logs: sudo journalctl -u empick-backend -f"
          echo "3. Verify S3 bucket permissions"
          echo "4. Check EC2 IAM roles for S3 access"
