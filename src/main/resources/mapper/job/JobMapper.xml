<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.piveguyz.empickbackend.orgstructure.job.query.mapper.JobMapper">

    <!-- 기본 ResultMap 정의 -->
    <resultMap id="jobResultMap" type="com.piveguyz.empickbackend.orgstructure.job.query.dto.JobResponseDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="code" column="code"/>
        <result property="isActive" column="is_active"/>
        <result property="description" column="description"/>
        <result property="roleId" column="role_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 권한 정보 포함 ResultMap -->
    <resultMap id="jobWithRoleResultMap" type="com.piveguyz.empickbackend.orgstructure.job.query.dto.JobResponseDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="code" column="code"/>
        <result property="isActive" column="is_active"/>
        <result property="description" column="description"/>
        <result property="roleId" column="role_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="roleCode" column="role_code"/>
        <result property="roleName" column="role_name"/>
    </resultMap>

    <!-- 사원 수 정보 포함 ResultMap -->
    <resultMap id="jobWithMemberCountResultMap" type="com.piveguyz.empickbackend.orgstructure.job.query.dto.JobResponseDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="code" column="code"/>
        <result property="isActive" column="is_active"/>
        <result property="description" column="description"/>
        <result property="roleId" column="role_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="memberCount" column="member_count"/>
        <result property="activeMemberCount" column="active_member_count"/>
    </resultMap>

    <!-- 전체 정보 포함 ResultMap -->
    <resultMap id="jobFullDetailsResultMap" type="com.piveguyz.empickbackend.orgstructure.job.query.dto.JobResponseDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="code" column="code"/>
        <result property="isActive" column="is_active"/>
        <result property="description" column="description"/>
        <result property="roleId" column="role_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="roleCode" column="role_code"/>
        <result property="roleName" column="role_name"/>
        <result property="memberCount" column="member_count"/>
        <result property="activeMemberCount" column="active_member_count"/>
    </resultMap>

    <!-- 모든 직무 조회 -->
    <select id="selectAllJobs" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        ORDER BY id
    </select>

    <!-- 활성 여부별 직무 조회 -->
    <select id="findByIsActive" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE is_active = #{isActive}
        ORDER BY id
    </select>

    <!-- ID로 직무 단건 조회 -->
    <select id="findById" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE id = #{id}
    </select>

    <!-- 코드로 직무 단건 조회 -->
    <select id="findByCode" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE code = #{code}
    </select>

    <!-- 이름으로 직무 단건 조회 -->
    <select id="findByName" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE name = #{name}
    </select>

    <!-- 코드로 직무 존재 여부 확인 -->
    <select id="existsByCode" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM job
        WHERE code = #{code}
    </select>

    <!-- 이름으로 직무 존재 여부 확인 -->
    <select id="existsByName" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM job
        WHERE name = #{name}
    </select>

    <!-- 권한 정보를 포함한 직무 조회 -->
    <select id="findWithRoleInfo" resultMap="jobWithRoleResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            r.code AS role_code, r.name AS role_name
        FROM job j
                 LEFT JOIN role r ON j.role_id = r.id
        ORDER BY j.id
    </select>

    <!-- 사원 수 정보를 포함한 직무 조회 -->
    <select id="findWithMemberCount" resultMap="jobWithMemberCountResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            COUNT(m.id) AS member_count,
            COUNT(CASE WHEN m.is_active = 1 THEN 1 END) AS active_member_count
        FROM job j
                 LEFT JOIN member m ON j.id = m.job_id
        GROUP BY j.id, j.name, j.code, j.is_active, j.description, j.role_id, j.created_at, j.updated_at
        ORDER BY j.id
    </select>

    <!-- 권한 정보와 사원 수 정보를 모두 포함한 상세 직무 조회 -->
    <select id="findWithFullDetails" resultMap="jobFullDetailsResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            r.code AS role_code, r.name AS role_name,
            COUNT(m.id) AS member_count,
            COUNT(CASE WHEN m.is_active = 1 THEN 1 END) AS active_member_count
        FROM job j
                 LEFT JOIN role r ON j.role_id = r.id
                 LEFT JOIN member m ON j.id = m.job_id
        GROUP BY j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at, r.code, r.name
        ORDER BY j.id
    </select>

    <!-- 특정 권한을 가진 직무 조회 -->
    <select id="findByRoleId" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE role_id = #{roleId}
        ORDER BY id
    </select>

    <!-- 이름으로 직무 검색 (부분 일치) -->
    <select id="findByNameContaining" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE name LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY id
    </select>

    <!-- 코드로 직무 검색 (부분 일치) -->
    <select id="findByCodeContaining" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE code LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY id
    </select>

    <!-- 설명이 있는 직무만 조회 -->
    <select id="findJobsWithDescription" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE description IS NOT NULL AND description != ''
        ORDER BY id
    </select>

    <!-- 설명이 없는 직무만 조회 -->
    <select id="findJobsWithoutDescription" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE description IS NULL OR description = ''
        ORDER BY id
    </select>

    <!-- 사원이 있는 직무만 조회 -->
    <select id="findJobsWithMembers" resultMap="jobWithMemberCountResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            COUNT(m.id) AS member_count,
            COUNT(CASE WHEN m.is_active = 1 THEN 1 END) AS active_member_count
        FROM job j
                 INNER JOIN member m ON j.id = m.job_id
        GROUP BY j.id, j.name, j.code, j.is_active, j.description, j.role_id, j.created_at, j.updated_at
        HAVING COUNT(m.id) > 0
        ORDER BY j.id
    </select>

    <!-- 사원이 없는 직무만 조회 -->
    <select id="findJobsWithoutMembers" resultMap="jobWithMemberCountResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            COALESCE(member_counts.member_count, 0) AS member_count,
            COALESCE(member_counts.active_member_count, 0) AS active_member_count
        FROM job j
                 LEFT JOIN (
            SELECT job_id,
                COUNT(*) AS member_count,
                COUNT(CASE WHEN is_active = 1 THEN 1 END) AS active_member_count
            FROM member
            GROUP BY job_id
        ) member_counts ON j.id = member_counts.job_id
        WHERE member_counts.member_count IS NULL OR member_counts.member_count = 0
        ORDER BY j.id
    </select>

    <!-- 특정 ID를 제외한 이름 중복 검사 -->
    <select id="existsByNameExcludingId" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM job
        WHERE name = #{name} AND id != #{excludeId}
    </select>

    <!-- 특정 ID를 제외한 코드 중복 검사 -->
    <select id="existsByCodeExcludingId" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM job
        WHERE code = #{code} AND id != #{excludeId}
    </select>

    <!-- 권한이 연결된 직무 조회 -->
    <select id="findJobsWithRole" resultMap="jobWithRoleResultMap">
        SELECT j.id, j.name, j.code, j.is_active, j.description, j.role_id,
            j.created_at, j.updated_at,
            r.code AS role_code, r.name AS role_name
        FROM job j
                 INNER JOIN role r ON j.role_id = r.id
        ORDER BY j.id
    </select>

    <!-- 권한이 연결되지 않은 직무 조회 -->
    <select id="findJobsWithoutRole" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE role_id IS NULL
        ORDER BY id
    </select>

    <!-- 활성 직무만 조회 -->
    <select id="findActiveJobs" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE is_active = 1
        ORDER BY id
    </select>

    <!-- 비활성 직무만 조회 -->
    <select id="findInactiveJobs" resultMap="jobResultMap">
        SELECT id, name, code, is_active, description, role_id, created_at, updated_at
        FROM job
        WHERE is_active = 0
        ORDER BY id
    </select>

</mapper>